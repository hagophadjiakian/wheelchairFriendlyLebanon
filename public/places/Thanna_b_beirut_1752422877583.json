// App.jsx
import { useEffect, useState } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import axios from "axios";

const wheelchairIcon = new L.Icon({
  iconUrl: "https://cdn-icons-png.flaticon.com/512/979/979585.png",
  iconSize: [32, 32],
});

const TYPES = ["All", "cafe", "beach", "restaurant"];

// Save to file
function saveToFile(place) {
  const blob = new Blob([JSON.stringify(place, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${place.name.replace(/\s+/g, "_")}_${place.id}.json`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Component for handling map clicks
function MapClickHandler({ onClick }) {
  useMapEvents({
    click(e) {
      onClick(e.latlng);
    },
  });
  return null;
}

export default function App() {
  const [places, setPlaces] = useState([]);
  const [formData, setFormData] = useState({
    name: "",
    lat: "",
    lon: "",
    type: "",
    rating: "",
    review: "",
    image: "",
    link: "",
    contact: "",
    city: "",
    caza: "",
    province: "",
    parking: "no",
    entrance: "no",
    seating: "no",
    toilet: "no",
  });
  const [selectedType, setSelectedType] = useState("All");

  useEffect(() => {
    const manualPlaces = JSON.parse(localStorage.getItem("manualPlaces")) || [];
    setPlaces((prev) => [...prev, ...manualPlaces]);
  }, []);

  useEffect(() => {
    const query = `
      [out:json][timeout:25];
      area[name="Lebanon"]->.searchArea;
      (
        node["amenity"~"restaurant|cafe"]["wheelchair"="yes"](area.searchArea);
      );
      out center;
    `;
    axios
      .post(
        "https://overpass-api.de/api/interpreter",
        `data=${encodeURIComponent(query)}`,
        {
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
        }
      )
      .then((res) => {
        const fetched = res.data.elements.map((el) => ({
          id: el.id,
          name: el.tags.name || "Unnamed",
          lat: el.lat,
          lon: el.lon,
          type: el.tags.amenity || "Unknown",
        }));
        setPlaces((prev) => [...fetched, ...prev]);
      });
  }, []);

  const addPlace = () => {
    const {
      name, lat, lon, type, image, link, contact,
      city, caza, province,
      parking, entrance, seating, toilet,
    } = formData;

    if (!name || !lat || !lon || !type) return;

    const yesCount = [parking, entrance, seating, toilet].filter(v => v === "yes").length;
    const baseRating = 1;
    const autoRating = Math.min(5, baseRating + yesCount);

    const autoReview = [
      parking === "yes" ? "‚úÖ Accessible parking" : "‚ùå No accessible parking",
      entrance === "yes" ? "‚úÖ Accessible entrance" : "‚ùå No accessible entrance",
      seating === "yes" ? "‚úÖ Accessible seating" : "‚ùå No accessible seating",
      toilet === "yes" ? "‚úÖ Accessible toilet" : "‚ùå No accessible toilet",
    ].join("\n");

    const newPlace = {
      id: Date.now(),
      name,
      lat: parseFloat(lat),
      lon: parseFloat(lon),
      type,
      image,
      link,
      contact,
      city,
      caza,
      province,
      rating: autoRating,
      review: autoReview,
      parking,
      entrance,
      seating,
      toilet,
    };

    const updatedPlaces = [...places, newPlace];
    setPlaces(updatedPlaces);

    const stored = JSON.parse(localStorage.getItem("manualPlaces")) || [];
    localStorage.setItem("manualPlaces", JSON.stringify([...stored, newPlace]));

    saveToFile(newPlace);

    setFormData({
      name: "", lat: "", lon: "", type: "", rating: "", review: "", image: "", link: "", contact: "",
      city: "", caza: "", province: "",
      parking: "no", entrance: "no", seating: "no", toilet: "no",
    });
  };

  const updateRating = (id, newRating) => {
    const updated = places.map((p) =>
      p.id === id ? { ...p, rating: parseInt(newRating) } : p
    );
    setPlaces(updated);

    const stored = JSON.parse(localStorage.getItem("manualPlaces")) || [];
    const newStored = stored.map((p) =>
      p.id === id ? { ...p, rating: parseInt(newRating) } : p
    );
    localStorage.setItem("manualPlaces", JSON.stringify(newStored));
  };

  const deletePlace = (id) => {
    const updated = places.filter((p) => p.id !== id);
    setPlaces(updated);

    const stored = JSON.parse(localStorage.getItem("manualPlaces")) || [];
    const newStored = stored.filter((p) => p.id !== id);
    localStorage.setItem("manualPlaces", JSON.stringify(newStored));
  };

  const handleMapClick = ({ lat, lng }) => {
    setFormData((prev) => ({
      ...prev,
      lat: lat.toFixed(6),
      lon: lng.toFixed(6),
    }));
  };

  const filteredPlaces =
    selectedType === "All"
      ? places
      : places.filter((p) => p.type?.toLowerCase() === selectedType);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-2">More Accessible Lebanon</h1>

      <div className="mb-4">
        <span className="mr-2 font-semibold">Filter:</span>
        {TYPES.map((type) => (
          <button
            key={type}
            className={`px-2 py-1 border mr-1 ${selectedType === type ? "bg-blue-500 text-white" : ""}`}
            onClick={() => setSelectedType(type)}
          >
            {type.charAt(0).toUpperCase() + type.slice(1)}
          </button>
        ))}
      </div>

      <div className="flex flex-wrap gap-2 mb-4">
        <input className="border p-1" placeholder="Name" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />
        <input className="border p-1" placeholder="Latitude" value={formData.lat} onChange={(e) => setFormData({ ...formData, lat: e.target.value })} />
        <input className="border p-1" placeholder="Longitude" value={formData.lon} onChange={(e) => setFormData({ ...formData, lon: e.target.value })} />
        <input className="border p-1" placeholder="Type (cafe, beach...)" value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })} />
        <input className="border p-1" placeholder="City" value={formData.city} onChange={(e) => setFormData({ ...formData, city: e.target.value })} />
        <input className="border p-1" placeholder="Caza" value={formData.caza} onChange={(e) => setFormData({ ...formData, caza: e.target.value })} />
        <input className="border p-1" placeholder="Province" value={formData.province} onChange={(e) => setFormData({ ...formData, province: e.target.value })} />
        <input className="border p-1" placeholder="Image URL" value={formData.image} onChange={(e) => setFormData({ ...formData, image: e.target.value })} />
        <input className="border p-1" placeholder="Website / Google Maps Link" value={formData.link} onChange={(e) => setFormData({ ...formData, link: e.target.value })} />
        <input className="border p-1" placeholder="Contact (Phone or Email)" value={formData.contact} onChange={(e) => setFormData({ ...formData, contact: e.target.value })} />

        <label className="flex items-center gap-1">
          <input type="checkbox" checked={formData.parking === "yes"} onChange={(e) => setFormData({ ...formData, parking: e.target.checked ? "yes" : "no" })} />
          Accessible Parking
        </label>
        <label className="flex items-center gap-1">
          <input type="checkbox" checked={formData.entrance === "yes"} onChange={(e) => setFormData({ ...formData, entrance: e.target.checked ? "yes" : "no" })} />
          Accessible Entrance
        </label>
        <label className="flex items-center gap-1">
          <input type="checkbox" checked={formData.seating === "yes"} onChange={(e) => setFormData({ ...formData, seating: e.target.checked ? "yes" : "no" })} />
          Accessible Seating
        </label>
        <label className="flex items-center gap-1">
          <input type="checkbox" checked={formData.toilet === "yes"} onChange={(e) => setFormData({ ...formData, toilet: e.target.checked ? "yes" : "no" })} />
          Accessible Toilet
        </label>

        <button className="bg-blue-500 text-white px-3" onClick={addPlace}>Add</button>
      </div>

      <MapContainer center={[33.8547, 35.8623]} zoom={8} style={{ height: "80vh" }}>
        <MapClickHandler onClick={handleMapClick} />
        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
        {filteredPlaces.map((place) => (
          <Marker key={place.id} position={[place.lat, place.lon]} icon={wheelchairIcon}>
            <Popup>
              <b>{place.name}</b>
              <br />{place.type}
              {place.city && <><br />üèôÔ∏è City: {place.city}</>}
              {place.caza && <><br />üèûÔ∏è Caza: {place.caza}</>}
              {place.province && <><br />üó∫Ô∏è Province: {place.province}</>}
              {place.contact && <><br />üìû Contact: {place.contact}</>}
              <br />‚≠ê {place.rating}/5
              <br />
              Update Rating:{" "}
              <input
                type="number"
                min="1"
                max="5"
                defaultValue={place.rating}
                onChange={(e) => updateRating(place.id, e.target.value)}
                className="border w-12 p-0.5"
              />
              {place.review && (
                <>
                  <br />
                  üìù {place.review.split("\n").map((line, idx) => (
                    <div key={idx}>{line}</div>
                  ))}
                </>
              )}
              {place.link && (
                <>
                  <br />
                  üîó <a href={place.link} target="_blank" rel="noopener noreferrer">Visit Link</a>
                </>
              )}
              {place.image && (
                <div style={{ marginTop: "8px" }}>
                  <img
                    src={place.image}
                    alt="Place"
                    style={{
                      width: "100%",
                      maxWidth: "180px",
                      maxHeight: "120px",
                      objectFit: "cover",
                      borderRadius: "8px",
                      border: "1px solid #ccc"
                    }}
                    onError={(e) => {
                      e.target.style.display = "none";
                    }}
                  />
                </div>
              )}
              <br />
              <button
                onClick={() => deletePlace(place.id)}
                className="mt-2 text-red-600 underline"
              >
                ‚ùå Delete this place
              </button>
            </Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  );
}
